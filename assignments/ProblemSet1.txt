			Last revised 29-Aug-15

			    Problem Set 1

		 Harvard Extension School CSCI E-92:
	     Principles of Operating Systems - Fall 2015

		 Due: Midnight on September 20, 2015


As described in the syllabus, submit the solution to all problems in
this Problem Set using "git" with the tag ps1-submit.

1. (5 Points) Multiprogramming.  Tanenbaum 3/e 1.1 (Tanenbaum 2/e
   1.2).  In additon, give at least two reasons for having
   multiprogramming.

2. (5 Points) Protected kernel mode operations.  Tanenbaum 3/e 1.7
   (Tanenbaum 2/e 1.8).  In addition, for each subsection a-d,
   describe what problems would be caused by allowing the instruction
   to run when not in kernel mode.

3. (5 Points) Priority inversion problem with priority scheduling
   vs. round-robin scheduling.  Tanenbaum 3/e 2.20 (Tanenbaum 2/e
   2.26)

4. (10 Points) Implementing semaphores using a disable interrupts
   instruction.  Tanenbaum 3/e 2.25 (Tanenbaum 2/e 2.23).  You must
   include pseudo-code for your solution.

5. (10 Points) Implementing counting semaphores using binary
   semaphores.  Tanenbaum 3/e 2.26 (Tanenbaum 2/e 2.24).  You must
   include pseudo-code for your solution.  By "ordinary machine
   instructions," we mean all facilities that are available through
   the C Programming Language, for example.  Your solution should use
   binary semaphores wherever mutual exclusion is needed.

6. (65 Points) Simple Shell Implementation

   Using the C Programming Language on the "nice" computers in the
   Science Center, implement a simple shell.  Your program should
   interact with the user through stdin, stdout, and stderr.  After
   outputting to stdout a prompt of "$ ", it will accept a line of
   text input (with a maximum length of 256 characters) from stdin and
   parse that line into white space delimited fields.  White space
   will be composed of one or more spaces or tabs.  From the input
   line, an integer named "argc" and an array named "argv" will
   created.  The integer argc will contain the count of the number of
   white space separated fields found in the input line.  The array
   argv will contain a list of pointers to each of the fields found in
   the input line.

   A declaration of argc and argv follows:

   int argc;
   char *argv[];

   Here is an example.  If the input were to contain:

   echo     this  is some     input   string

   then argc would contain 6 and argv would be an array of 6 pointers
   to null terminated strings, the first string would be "echo", the
   second string would be "this", and so forth.  Note that the argv
   array needs to be dynamically allocated and that each of the
   strings pointed to by each entry in argv needs to be dynamically
   allocated.  The strings pointed to by argv will never contain any
   spaces or tabs.  The space allocated for argv should be exactly the
   required size (i.e., it should occupy argc*sizeof(char *) bytes).
   Similarly, the space allocated for each string should be exactly
   the required size (i.e., each string should occupy the number of
   bytes in the string + 1 for a null terminating byte).  Storage
   should be allocated using the malloc system call.

   After argc and argv are created, the shell will scan an array named
   "commands" for a match for the first string in argv and will then
   call a different function for each entry in "commands".  That is,
   we will assume that the first word on the line in the name of a
   program to be invoked by the shell.

   A declaration of commands with the initialization of four commands
   as follows:

   int cmd_date(int argc, char *argv[]);
   int cmd_echo(int argc, char *argv[]);
   int cmd_exit(int argc, char *argv[]);
   int cmd_help(int argc, char *argv[]);

   struct commandEntry {
     char *name;
     int (*functionp)(int argc, char *argv[]);
   } commands[] = {{"date", cmd_date},
                   {"echo", cmd_echo},
                   {"exit", cmd_exit},
                   {"help", cmd_help}};

   After a command returns to the shell, all storage allocated for
   argv and the strings that argv points to should be freed.  After
   the storage is freed, the shell should loop back to prompt the user
   for another input line.

   You should implement four commands.  "exit" will exit from the
   shell (i.e., cause the shell to terminate) by calling the exit
   system call.  "echo" will output each of the arguments in argv
   (except for the first) to stdout with a single space character
   between the srguments.  "help" will output to stdout a brief
   description of the commands accepted by the shell.  "date" will
   output to stdout the current date and time in the current timezone
   in the format "January 23, 2014 15:57:07.123456".  "date" will call
   the POSIX system call "gettimeofday" to determine the time and date
   in the current timezone.  "gettimeofday" returns the number of
   seconds and microseconds since midnight (zero hours) on January 1,
   1970.

   Each command should return an integer to indicate if it succeeded
   or failed and a specific error code on failure.  A value of 0 will
   indicate success and a non-zero value will indicate failure.  You
   should create your own enumerated type of error codes for different
   errors.  If the return value is non-zero, the shell should output
   the value of that return value.  All error messages should be
   output to stderr.

   Each command should check that the appropriate number of arguments
   are specified on the command line.  If no arguments are appropriate
   for a command, then command should guarantee that no arguments have
   been specified.  The "echo" command accepts any number of arguments
   (including none), so no argument count checking is required.

   Your translation from seconds and microseconds since zero hours on
   January 1, 1970 into year, month, day, hours, minutes, seconds, and
   millionths of seconds must be written from scratch using no system
   functions.  Keep in mind that some years are leap years and others
   are not.  Leap years contain 366 days (February 29th) and all other
   years contain 365 days.  Every year that is evenly divisible by
   four is a leap year, except that every year divisible by 100 is not
   a leap year, except that every year divisible by 400 is a leap
   year.

   Your code may use only the following systems calls:
     malloc
     free
     exit
     fgetc
     fputc
     fputs
     fprintf
     gettimeofday
     strerror

   You may use only stdin, stdout, and stderr as I/O streams.

   Extra credit: Allow fields on the line to be double-quote delimited
   strings that can contain spaces or tabs.  Ensure that any such
   field has a matching open double-quote and close double-quote.
   Also, allow a double-quote to appear within a double-quoted field
   in either or both of two possible ways: (1) allow two adjacent
   double-quotes within a double-quoted field to denote a single
   double-quote within the field, (2) implement the following
   backslash escape notation to allow special characters within a
   double-quoted string.

   Extra credit: Implement special backslash escape characters for
   shell command arguments (either outside or inside double-quoted
   string arguments).  If this is implemented, then the backslash
   character would serve as a prefix for the next character.  These
   two characters would then be replaced with a designated single
   character in the argument.  The character after the backslash would
   indicate what character would be designated to be used in the
   argument as follows:

     Escape sequence	Designated replacement character
     \0			null (ASCII 0)
     \a			alarm (bell) (control-g) (ASCII 7)
     \b			backspace (control-h) (ASCII 8)
     \e			escape (ASCII 27 = 0x1b)
     \f			form-feed (control-l) (ASCII 12 = 0xc)
     \n			newline (line-feed) (control-j) (ASCII 10 = 0xa)
     \r			carriage-return (control-m) (ASCII 13 = 0xd)
     \t			horizontal-tab (control-i) (ASCII 9)
     \v			vertical-tab (control-k) (ASCII 11 = 0xb)

   If the character following the backslash is not shown in the table
   above, then the character following the backslash should be used
   literally.  Obviously, this would include the double-quote and
   backslash characters.

   Extra credit: Add additional built-in commands to your shell.  None
   of the commands you add should require use of files.

   Extra credit: Add variables to your shell.  You should have a "set"
   command to define a variable and to output all defined environment
   variables.  If the "set" command is invoked with no arguments, it
   will display the values of all shell variables.  If the "set"
   command is invoked in the format "set <variable>=<value>", then the
   shell variable <variable> is defined with the value <value> as a
   string.  Variable names may consist of letters and digits starting
   with a letter.  In variable names, the underscore character is
   treated as a letter.  You should not impose any constraints on the
   length of either variable names or of their values.  The value
   field may optionally be enclosed in double-quotes.  If any command
   line contains a dollar-sign followed by the name of a variable,
   then the value of the variable is substituted for its name -- this
   includes a possible substitution at the beginning of the command
   line where the command name would appear.  When this substitution
   phase is being performed, the name of a variable within a command
   line is terminated by a non-alphabetic and non-numeric character.
   It is an error to reference a variable which is not set.  You
   should also implement the shell command "unset" which is invoked in
   the format "unset <variable>" to remove a variable from being
   defined in the shell.
